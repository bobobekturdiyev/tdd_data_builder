import 'dart:io';

void main(List<String> arguments) {
  final type = arguments.isNotEmpty ? arguments[0] : '';
  final name = capitalizeFirstLetter(arguments.length >= 2 ? arguments[1] : '');
  final arg3 = arguments.length >= 3 ? arguments[2] : '';
  final folderName = pascalToUnderscore(name);

  switch (type) {
    case 'dto':
      final file = File('lib/data/dto/$folderName/$folderName.dart');
      file.createSync(recursive: true);

      file.writeAsStringSync(getDtoContent(name, folderName));

      if (arg3 == '--entity') {
        final entityFile =
            File('lib/domains/entities/$folderName/$folderName.dart');
        entityFile.createSync(recursive: true);
        entityFile.writeAsStringSync(getEntityContent(name));
      }
      break;
    case 'service':
      final file =
          File('lib/data/services/$folderName/${folderName}_$type.dart');
      file.createSync(recursive: true);
      file.writeAsStringSync(getServiceContent(name));
      break;

    case 'data-response':
      final responseFile = File('lib/data/dto/default/default_response.dart');
      responseFile.createSync(recursive: true);

      if (!responseFile.existsSync()) {
        responseFile.writeAsStringSync(getDataResponseContent());
      } else {
        print('default_response.dart file already exists\n');
      }
      break;
    default:
      print('Invalid type. Supported types: dto, service');
      return;
  }

  print('$type generated successfully!');
}

String getDtoContent(String dtoName, String folderName) {
  return '''
import 'package:json_annotation/json_annotation.dart';

// THIS CODE IS GENERATED BY tdd_data_builder

part '$folderName.g.dart';

@JsonSerializable()
class ${dtoName}Dto {
  // TODO: Add your DTO properties here

  ${dtoName}Dto();

  factory ${dtoName}Dto.fromJson(Map<String, dynamic> json) =>
      _\$${dtoName}DtoFromJson(json);

  Map<String, dynamic> toJson() => _\$${dtoName}DtoToJson(this);
}
''';
}

String getEntityContent(String entityName) {
  return '''
// THIS CODE IS GENERATED BY tdd_data_builder

class $entityName {
  const $entityName();
}
''';
}

String getServiceContent(String serviceName) {
  return '''
import 'package:retrofit/retrofit.dart';
import 'package:dio/dio.dart';

// THIS CODE IS GENERATED BY tdd_data_builder

part '${serviceName}_service.g.dart';

// Change baseUrl here
@RestApi(baseUrl: Urls.baseURl)
abstract class ${serviceName}Service {
  factory ${serviceName}Service(Dio dio, {String baseUrl}) = _${serviceName}Service;

  //@GET("WRITE_THE_URL")
  //Future<HttpResponse<List<SampleDto>>> getData();
}
''';
}

String getDataResponseContent() {
  return '''
part 'data_response.g.dart';

// THIS CODE IS GENERATED BY tdd_data_builder

@JsonSerializable()
class DataResponse<T> {
  @JsonKey(name: "data")
  @_Converter()
  final List<T> data;

  const DataResponse({
    required this.data,
  });

  factory DataResponse.fromJson(Map<String, dynamic> json) =>
      _\$DataResponseFromJson<T>(json);

  Map<String, dynamic> toJson() => _\$DataResponseToJson(this);
}

class _Converter<T> implements JsonConverter<T, Object?> {
  const _Converter();

  @override
  T fromJson(Object? json) {
    if (json is Map<String, dynamic>) {
      switch (T) {
        //case SampleDto:
          //return SampleDto.fromJson(json) as T;
      }
      return DefaultResponse<T>.fromJson(json) as T;
    }
    return json as T;
  }

  @override
  Object? toJson(T object) => object;
}

  ''';
}

String capitalizeFirstLetter(String input) {
  if (input.isEmpty) {
    return input;
  }

  input = clearKeywords(input);

  return input[0].toUpperCase() + input.substring(1);
}

String clearKeywords(String input) {
  input = input.replaceAll('dto', '');
  input = input.replaceAll('service', '');
  input = input.replaceAll('Dto', '');
  input = input.replaceAll('Service', '');
  return input;
}

String pascalToUnderscore(String input) {
  if (input.isEmpty) {
    return input;
  }

  input = clearKeywords(input);

  var buffer = StringBuffer();
  for (var i = 0; i < input.length; i++) {
    var char = input[i];
    if (char == char.toUpperCase()) {
      if (i > 0) {
        buffer.write('_');
      }
      buffer.write(char.toLowerCase());
    } else {
      buffer.write(char.toLowerCase());
    }
  }
  return buffer.toString();
}
